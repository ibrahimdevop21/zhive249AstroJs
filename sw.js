const CACHE_VERSION="v1",CACHE_NAMES={static:"static-v1",pages:"pages-v1",assets:"assets-v1"},OFFLINE_URL="/offline",OFFLINE_IMAGE="/images/offline.svg",STATIC_ASSETS=["/offline","/manifest.json","/favicon.svg","/favicon-32x32.png","/favicon-16x16.png","/apple-touch-icon.png","/fonts/SpaceGrotesk.woff2",OFFLINE_IMAGE],NETWORK_FIRST_PATTERNS=[/\/$/,/\/api\//,/\.(astro|html)$/],CACHE_FIRST_PATTERNS=[/\.(woff2?|ttf|eot)$/,/\.(png|jpg|jpeg|gif|svg|ico|webp)$/,/\.(css|js)$/];function matchesPatterns(t,e){return e.some((e=>e.test(t.pathname)))}async function fetchAndCache(t,e){try{const a=await fetch(t);if(a.ok&&"GET"===t.method){(await caches.open(e)).put(t,a.clone())}return a}catch(t){throw t}}async function networkFirstWithTimeout(t,e=3e3){try{const a=new Promise(((t,a)=>{setTimeout((()=>a(new Error("Network timeout"))),e)})),s=await Promise.race([fetch(t),a]);if(s.ok&&"GET"===t.method){(await caches.open(CACHE_NAMES.pages)).put(t,s.clone())}return s}catch(e){const a=await caches.match(t);if(a)return a;if("navigate"===t.mode){return(await caches.open(CACHE_NAMES.static)).match("/offline")}throw e}}async function cacheFirst(t){const e=await caches.match(t);return e||fetchAndCache(t,CACHE_NAMES.assets)}async function clearOldCaches(){const t=await caches.keys(),e=Object.values(CACHE_NAMES);return Promise.all(t.filter((t=>!e.includes(t))).map((t=>caches.delete(t))))}self.addEventListener("install",(t=>{t.waitUntil((async()=>{const t=await caches.open(CACHE_NAMES.static);await t.addAll(STATIC_ASSETS),await self.skipWaiting()})())})),self.addEventListener("activate",(t=>{t.waitUntil(Promise.all([clearOldCaches(),self.clients.claim()]))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method)return;const e=new URL(t.request.url);t.respondWith((async()=>{try{return matchesPatterns(e,NETWORK_FIRST_PATTERNS)?await networkFirstWithTimeout(t.request):matchesPatterns(e,CACHE_FIRST_PATTERNS)?await cacheFirst(t.request):await networkFirstWithTimeout(t.request)}catch(e){if("navigate"===t.request.mode){return(await caches.open(CACHE_NAMES.static)).match("/offline")}if("image"===t.request.destination){return(await caches.open(CACHE_NAMES.static)).match(OFFLINE_IMAGE)}throw e}})())}));